/*
   Copyright (C) 2014 - 2016 Mutzii

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/
#ifndef FACTORY_TEMPLATE
#define FACTORY_TEMPLATE

template< class _RenderElement >
OpenPolygonDisplay * ElementFactory< _RenderElement >::m_display = nullptr;

template< class _RenderEntity >
OpenPolygonDisplay * EntityFactory< _RenderEntity >::m_display = nullptr;


template< class _RenderElement >
ElementFactory< _RenderElement >::ElementFactory( OpenPolygonDisplay * display )
{
    m_display = display;
}

template< class _RenderElement >
_RenderElement * ElementFactory< _RenderElement >::create(void)
{
     _RenderElement * object = new _RenderElement();
      object->create( m_display );
      return object;
}

template< class _RenderElement >
_RenderElement * ElementFactory< _RenderElement >::create( const Vector2f & position )
{
     _RenderElement * object = new _RenderElement();
     object->create( m_display );

     if( object->getElement()->hasComponent("position") )
     {
         Position * obj_pos = EntityManager::getSingletonPtr()->getPosition( object->getElement()->getComponent("position")->getID() );
         obj_pos->setPosition( Vector3f( position.getX() , position.getY() , 0 ) );
     }

     return object;
}

template< class _RenderElement >
std::vector< _RenderElement * > ElementFactory<_RenderElement >::createList( int size )
{
    std::vector< _RenderElement *> list;

    for(int count=0; count < size; count++ )
    {
        _RenderElement * object = new _RenderElement();
        object->create( m_display );

        list.push_back( object );
    }

    return list;
}


template< class RenderEntity >
EntityFactory< RenderEntity >::EntityFactory( OpenPolygonDisplay * display )
{
    m_display = display;
}

template < class RenderEntity >
RenderEntity * EntityFactory< RenderEntity>::create(void)
{
    RenderEntity * object = new RenderEntity();
    object->create( m_display );
    return object;
}

template< class RenderEntity >
RenderEntity * EntityFactory< RenderEntity >::create( const Vector3f & position  )
{
    RenderEntity * object = new RenderEntity();
    object->create( m_display );

    if( object->getEntity()->hasComponent("position") )
    {
        Position * obj_pos = EntityManager::getSingletonPtr()->getPosition( object->getEntity()->getComponent("position")->getID() );
        obj_pos->setPosition( position );
    }

    return object;
}

#endif // FACTORY_TEMPLATE
