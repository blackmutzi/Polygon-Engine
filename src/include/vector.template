#ifndef VECTOR_TEMPLATE
#define VECTOR_TEMPLATE

template< typename A>
Vector4<A>::Vector4()
{
    mX = 0;
    mY = 0;
    mZ = 0;
    mA = 0;
}

template< typename A>
Vector4<A>::Vector4(A x, A y, A z , A a)
{
    mX = x;
    mY = y;
    mZ = z;
    mA = a;
}

template< typename A>
Vector4<A> & Vector4<A>::operator =( const Vector4<A> &copy)
{
    setX( copy.getX() );
    setY( copy.getY() );
    setZ( copy.getZ() );
    setA( copy.getA() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator +=( const Vector4<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );
    setZ( getZ() + copy.getZ() );
    setA( getA() + copy.getA() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator +( const Vector4<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );
    setZ( getZ() + copy.getZ() );
    setA( getA() + copy.getA() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator +( const Vector3<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );
    setZ( getZ() + copy.getZ() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator +( const Vector2<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator -( const Vector4<A> &copy)
{
    setX( getX() - copy.getX() );
    setY( getY() - copy.getY() );
    setZ( getZ() - copy.getZ() );
    setA( getA() - copy.getA() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator -( const Vector3<A> &copy)
{
    setX( getX() - copy.getX() );
    setY( getY() - copy.getY() );
    setZ( getZ() - copy.getZ() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator -( const Vector2<A> &copy)
{
    setX( getX() - copy.getX() );
    setY( getY() - copy.getY() );

    return *this;
}

template< typename A>
bool Vector4<A>::operator ==( const Vector4<A> & copy )
{
    if( getX() == copy.getX() &&
        getY() == copy.getY() &&
        getZ() == copy.getZ() &&
        getA() == copy.getA()
    )
    {
        return true;
    }

    return false;
}

template< typename A>
bool Vector4<A>::operator !=( const Vector4<A> & copy )
{
    if( getX() != copy.getX() ||
        getY() != copy.getY() ||
        getZ() != copy.getZ() ||
        getA() != copy.getA()
    )
    {
        return true;
    }

    return false;
}

template< typename A>
Vector4<A> & Vector4<A>::operator *(const Vector4<A> &copy)
{
    setX( getX() * copy.getX() );
    setY( getY() * copy.getY() );
    setZ( getZ() * copy.getZ() );
    setA( getA() * copy.getA() );

    return *this;
}

template< typename A>
Vector4<A> & Vector4<A>::operator *(const A f)
{
    setX( getX() * f );
    setY( getY() * f );
    setZ( getZ() * f );
    setA( getA() * f );

    return *this;
}



template< typename A>
A Vector4<A>::getX(void) const
{
    return mX;
}

template< typename A>
A Vector4<A>::getY(void) const
{
    return mY;
}

template< typename A>
A Vector4<A>::getZ(void) const
{
    return mZ;
}

template< typename A>
A Vector4<A>::getA(void) const
{
    return mA;
}


template< typename A>
void Vector4<A>::setX(A x)
{
    mX = x;
}

template< typename A>
void Vector4<A>::setY(A y)
{
    mY = y;
}

template< typename A>
void Vector4<A>::setZ(A z)
{
    mZ = z;
}

template< typename A>
void Vector4<A>::setA(A a)
{
    mA = a;
}


//##############################################################

template< typename A>
Vector3<A>::Vector3()
{
    mX = 0;
    mY = 0;
    mZ = 0;
}

template< typename A>
Vector3<A>::Vector3(A x, A y, A z)
{
    mX = x;
    mY = y;
    mZ = z;
}

template< typename A>
bool Vector3<A>::operator <( const Vector3<A> &vector ) const
{
   return false;
}


template< typename A>
Vector3<A> & Vector3<A>::operator =( const Vector3<A> &copy)
{
    setX( copy.getX() );
    setY( copy.getY() );
    setZ( copy.getZ() );

    return *this;
}

template< typename A>
Vector3<A> & Vector3<A>::operator +=( const Vector3<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );
    setZ( getZ() + copy.getZ() );

    return *this;
}

template< typename A>
Vector3<A> & Vector3<A>::operator +( const Vector3<A> &copy)
{
    setX( getX() + copy.getX() );
    setY( getY() + copy.getY() );
    setZ( getZ() + copy.getZ() );

    return *this;
}


template< typename A>
Vector3<A> & Vector3<A>::operator -( const Vector3<A> &copy)
{
    setX( getX() - copy.getX() );
    setY( getY() - copy.getY() );
    setZ( getZ() - copy.getZ() );

    return *this;
}


template< typename A>
bool Vector3<A>::operator ==( const Vector3<A> & copy ) const
{
    if( getX() == copy.getX() &&
        getY() == copy.getY() &&
        getZ() == copy.getZ()
    )
    {
        return true;
    }

    return false;
}

template< typename A>
bool Vector3<A>::operator !=( const Vector3<A> & copy ) const
{
    if( getX() != copy.getX() ||
        getY() != copy.getY() ||
        getZ() != copy.getZ()
    )
    {
        return true;
    }

    return false;
}


template< typename A>
void Vector3<A>::normalize(void)
{
    A ax = getX();
    A ay = getY();
    A az = getZ();

    A length = sqrt( (ax * ax) + (ay * ay) + (az * az) );

    setX( ax / length );
    setY( ay / length );
    setZ( az / length );
}

template< typename A>
void Vector3<A>::inverse(void)
{
    setX( getX() - ( getX() * 2) );
    setY( getY() - ( getY() * 2) );
    setZ( getZ() - ( getZ() * 2) );
}

template< typename A>
Vector3<A> & Vector3<A>::operator *(const Vector3<A> &copy)
{
    setX( getX() * copy.getX() );
    setY( getY() * copy.getY() );
    setZ( getZ() * copy.getZ() );

    return *this;
}

template< typename A>
Vector3<A> & Vector3<A>::operator *(const A f)
{
    setX( getX() * f );
    setY( getY() * f );
    setZ( getZ() * f );

    return *this;
}


template< typename A>
A Vector3<A>::getX(void) const
{
    return mX;
}

template< typename A>
A Vector3<A>::getY(void) const
{
    return mY;
}

template< typename A>
A Vector3<A>::getZ(void) const
{
    return mZ;
}


template< typename A>
void Vector3<A>::setX(A x)
{
    mX = x;
}

template< typename A>
void Vector3<A>::setY(A y)
{
    mY = y;
}

template< typename A>
void Vector3<A>::setZ(A z)
{
    mZ = z;
}

//##############################################################


template< typename A>
Vector2<A>::Vector2(void)
{
    mX = 0;
    mY = 0;
}

template< typename A>
Vector2<A>::Vector2(A x, A y)
{
    mX = x;
    mY = y;
}

template< typename A>
Vector2<A> & Vector2<A>::operator =(const Vector2<A> &copy)
{
    setX( copy.getX() );
    setY( copy.getY() );

    return *this;
}

template< typename A>
Vector2<A> & Vector2<A>::operator +(const Vector2<A> &r)
{
    setX( getX() + r.getX() );
    setY( getY() + r.getY() );

    return *this;
}

template< typename A>
Vector2<A> & Vector2<A>::operator -(const Vector2<A> &r)
{
    setX( getX() - r.getX() );
    setY( getY() - r.getY() );

    return *this;
}

template< typename A>
bool Vector2<A>::operator ==( const Vector2<A> & copy )
{
    if( getX() == copy.getX() &&
        getY() == copy.getY()
    )
    {
        return true;
    }

    return false;
}

template< typename A>
bool Vector2<A>::operator !=( const Vector2<A> & copy )
{
    if( getX() != copy.getX() ||
        getY() != copy.getY()
    )
    {
        return true;
    }

    return false;
}

template< typename A>
void Vector2<A>::normalize(void)
{
    A ax = getX();
    A ay = getY();
    A length = sqrt((ax * ax) + (ay * ay));

    setX( ax / length );
    setY( ay / length );
}

template< typename A>
Vector2<A> & Vector2<A>::operator *(const Vector2<A> &copy)
{
    setX( getX() * copy.getX() );
    setY( getY() * copy.getY() );

    return *this;
}

template< typename A>
Vector2<A> & Vector2<A>::operator *(const A f)
{
    setX( getX() * f );
    setY( getY() * f );

    return *this;
}

template< typename A>
A Vector2<A>::getX(void) const
{
    return mX;
}

template< typename A>
A Vector2<A>::getY(void) const
{
    return mY;
}

template< typename A>
void Vector2<A>::setX(A x)
{
    mX = x;
}

template< typename A>
void Vector2<A>::setY(A y)
{
    mY = y;
}


#endif // VECTOR_TEMPLATE
